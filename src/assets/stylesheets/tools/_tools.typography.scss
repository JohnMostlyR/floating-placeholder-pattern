///*------------------------------------*\
//    # TYPOGRAPHY - TOOL
//\*------------------------------------*/

// Replace `$search` with `$replace` in `$string`
//
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
//
// @access private
//
// @return {String} - Updated string
//
// @author Hugo Giraudel
// @link http://bit.ly/1Khge01
//
@function _jm-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + _jm-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Combine the the value of two Sass maps
//
// @param {Map} $source - The original Sass map
// @param {Map} $map - Sass map containing the new values to be combined
//
// @access private
//
// @return {Map} - New map consisting of the values of both supplied maps
//
// @author Hugo Giraudel
// @link http://bit.ly/1PPIoj4
//
@function _jm-map-combine($source, $map) {
  @each $key, $value in $map {
    $new: ($key: $value);

    @if map-has-key($source, $key) {
      $current: map-get($source, $key);
      $new: ($key: map-merge($current, $value));
    }

    $source: map-merge($source, $new);
  }

  @return $source;
}

// Return the type settings for the requested type class/type group. If a bold variant is
// requested the bold type values will be combined with the type values of the non-bold
// variant.
//
// @param {String} $type-class - name of the type class you want the settings for (e.g. pica)
// @param {String} $type-group (all) - which type group you want the values for (e.g. group-a)
//
// @returns {Map} - a map of the type settings for the requested type class/type group
//
// @author Shaun Bent
// @author Adam Bulmer
//
@function jm-typography($type-class, $type-group: 'all') {
  $type-settings: map-get($jm-type-settings, $type-class);

  @if (str-index($type-class, '-bold')) {
    $root-type-group: map-get($jm-type-settings, _jm-str-replace($type-class, '-bold'));
    $type-settings: _jm-map-combine($root-type-group, $type-settings);
  }

  @if ($type-group != 'all') {
    @return map-get($type-settings, $type-group);
  }

  @return $type-settings;
}

// Output the type values for the requested type class (e.g pica). This will return all required media
// queries and no-touch fallbacks
//
// @param {String} $type-class - name of the type class to output the values for
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin jm-typography($type-class) {
  @include _jm-output-type-values(jm-typography($type-class, 'group-a'));

  @include mq($from: jm-bp-type-b) {
    @include _jm-output-type-values(jm-typography($type-class, 'group-b'));
  }

  @include mq($from: jm-bp-type-c) {
    @include _jm-output-type-values(jm-typography($type-class, 'group-c'));

    .#{$jm-type-touch-class} & {
      @include _jm-output-type-values(jm-typography($type-class, $jm-type-no-touch-group));
    }
  }
}

// Loop through a supplied Sass map and return each key/value as CSS properties
// and values. Any `px` value will be automatically passed to the `rem` tool
//
// @param {Map} $type-values - a map of CSS values in property: value format
//
// @access private
//
// @author Shaun Bent
// @author Adam Bulmer
//
@mixin _jm-output-type-values($type-values) {
  @each $property, $value in $type-values {
    @if ($property == 'font-weight' and $value == bold and mixin-exists(base-font-bold)) {
      @include base-font-bold();
    }

    @if (type-of($value) == number and unit($value) == 'px') {
      @include rem($property, $value);
    }
  }
}
