///*------------------------------------*\
//    # GRID - TOOLS
//\*------------------------------------*/

// Grid container, used to wrap all grid elements and apply the correct maximum widths
//
// @author Shaun Bent
//
@mixin jm-wrap() {
  max-width: $jm-grid-max-width;
  margin: 0 auto;
  padding-right: $jm-spacing-unit;
  padding-left: $jm-spacing-unit;

  @include mq($from: $jm-grid-margin-change) {
    padding-left: double($jm-spacing-unit);
    padding-right: double($jm-spacing-unit);
  }
}

// A single layout group/row, this wraps individual layout items
//
// We want fine-grain control over which implementations of flexbox we support
// so we will manually handle prefixes
//
// 1. Remove any default list styling if the layout is applied to a list
// 2. Remove any margin and padding which may effect our layout
//
// @author Shaun Bent
//
@mixin jm-layout() {
  list-style: none; // [1]
  direction: flip(ltr, rtl);
  text-align: flip(left, right);

  display: flex;
  flex-flow: row wrap;
  flex-grow: 1;
  margin-right: 0; // [2]
  margin-left: -$jm-spacing-unit;
  padding-right: 0; // [2]
  padding-left: 0; // [2]

  @include mq($from: $jm-grid-gutter-change) {
    margin-left: double(-$jm-spacing-unit);
  }

  @if $jm-grid-enable--whitespace-fix {
    letter-spacing: -0.31em;
    text-rendering: optimizespeed;

    @at-root {
      // Opera as of 12 on Windows needs word-spacing.
      .opera-only :-o-prefocus,
      #{&} {
        word-spacing: -0.43em;
      }
    }

  }
}

// A single layout group/row, this wraps individual layout items
//
// 1. Cause columns to stack side-by-side
// 2. Space columns apart
// 3. Ensure all text is aligned correctly
// 4. Align columns to the tops of each other
//
// @author  Shaun Bent
//
@mixin jm-layout-item() {
  width: 100%;
  display: inline-block; // [1]
  padding-left: $jm-spacing-unit; // [2]

  text-align: flip(left, right); // [3]
  vertical-align: top; // [4]

  @include mq($from: $jm-grid-gutter-change) {
    padding-left: double($jm-spacing-unit); // [2]
  }

  @if $jm-grid-enable--whitespace-fix {
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;
  }
}

// Outputs a collection of generic grid classes
//
// @author Shaun Bent
//
@mixin jm-output-grid() {
  /**
   * Grid containing element
   */
  .o-wrap {
    @include jm-wrap;
  }

  /**
   * A grid row
   */
  .o-layout {
    @include jm-layout;
  }

  /**
   * A single grid item
   */
  .o-layout__item {
    @include jm-layout-item;
  }

  /**
   * Layouts with no gutters.
   */
  .o-layout--flush {
    margin-left: 0;

    > .o-layout__item {
      padding-left: 0;
    }
  }

  /**
   * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
   * markup will display in order 4, 3, 2, 1 on your page
   */
  .o-layout--rev {
    flex-direction: row-reverse;

    .#{$jm-grid-flexbox-feature-detection-class} & {
      direction: rtl;
      text-align: left;

      > .o-layout__item,
      > %o-layout__item {
        direction: ltr;
        text-align: left;
      }
    }
  }

  /**
   * Align layout items to the vertical centers of each other
   */
  .o-layout--middle {
    align-items: center;

    > .o-layout__item {
      vertical-align: middle;
    }
  }

  /**
   * Align layout items to the vertical bottoms of each other
   */
  .o-layout--bottom {
    align-items: flex-end;

    > .o-layout__item {
      vertical-align: bottom;
    }
  }

  /**
   * Make the layout items fill up from the right hand side
   */
  .o-layout--right {
    text-align: right;
    justify-content: flex-end;

    > .o-layout__item {
      text-align: flip(left, right);
    }
  }

  /**
   * Make the layout items fill up from the center outward
   */
  .o-layout--center {
    text-align: center;
    justify-content: center;

    > .o-layout__item {
      text-align: flip(left, right);
    }
  }

  /**
   * Cause layout items to take up a non-explicit amount of width
   */
  .o-layout--auto {
    > .o-layout__item {
      width: auto;
    }
  }

  /**
   * Disable the flexbox grid
   *
   * 1. Prevents floated layout items from shrinking the layout
   */
  .o-layout--no-flex {
    min-width: 100%; // [1]

    &,
    > .o-layout__item {
      display: inline-block;
    }
  }

  /**
   * Force items to be of equal height
   */
  .o-layout--equal {
    > .o-layout__item {
      display: flex;
    }
  }

  /**
   * Allow items to devide the space equally between the number of items
   */
  .o-layout--fit {
    > .o-layout__item {
      width: auto;
      flex: 1 1 auto;
    }
  }

  /**
   * Align a single grid item to the top
   */
  .o-layout__item--top {
    align-self: flex-start;
  }

  /**
   * Align a single grid item to the center
   */
  .o-layout__item--center {
    align-self: center;
  }

  /**
   * Align a single grid item to the bottom
   */
  .o-layout__item--bottom {
    align-self: flex-end;
  }
}

// Outputs a collection of grid-agnostic width utility classes which can be applied be
// combined with the grid system or applied to any element to give it a percentage based with.
//
// @author Shaun Bent
//
@mixin jm-output-widths() {
  @include _jm-widths($jm-grid-columns);

  @each $breakpoint in $jm-grid-breakpoints {
    @include mq($from: '#{$jm-grid-breakpoint-namespace}#{$breakpoint}') {
      @include _jm-widths($jm-grid-columns, $breakpoint);
    }
  }
}

// Returns a percentage value for the required number of columns
//
// @param {Number}  $span - number of columns required to span
// @param {Number}  $columns ($jm-grid-default-columns) - total number of columns available
//
// @return {Number} Percentage for the required number of columns
//
// @author          Shaun Bent
//
@function jm-columns($span, $columns: $jm-grid-default-columns) {
  @if $span >= 1 {
    // Convert the given span to a fraction of the columns
    @return percentage($span / $columns);
  } @else {
    // A fraction has been supplied so lets just converting it to a percentage
    @return percentage($span);
  }
}

// Get a width for a specific number of columns
//
// @param {Number} $span - number of columns required to span
// @param {Number} $columns ($jm-grid-default-columns) - total number of columns available
//
// @author Shaun Bent
//
@mixin jm-columns($span, $columns: $jm-grid-default-columns) {
  width: jm-columns($span, $columns);
}

// Generate width classes for the requested columns and breakpoint modifier
//
// @param {List} $columns - a list of all the columns you'd like to be output
// @param {String} $breakpoint - any breakpoint suffix appended to the class
//
// @author Shaun Bent
//
@mixin _jm-widths($columns, $breakpoint: null) {
  $breakpoint-suffix: '';

  @if $breakpoint != null {
    $breakpoint-suffix: \@#{$breakpoint};
  }

  @each $column in $columns {
    @if $column == 1 {
      // no point outputting 100% several times so lets just do it once
      .u-#{$column}\/#{$column}#{$breakpoint-suffix} {
        width: 100% !important;
      }
    } @else {
      @for $i from 1 to $column {
        .u-#{$i}\/#{$column}#{$breakpoint-suffix} {
          width: jm-columns($i / $column) !important;
        }
      }
    }
  }
}
